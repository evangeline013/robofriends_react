{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","src","concat","this","props","id","alt","name","email","React","Component","CardList","robots","map","user","components_Card","key","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3416f37f.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <div className='tc bg-light-pink dib br3 br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${this.props.id}?200x200`} alt='robots' />\n        <div>\n          <h2>{this.props.name}</h2>\n          <p>{this.props.email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nclass CardList extends React.Component {\n  render() {\n    return (\n      <div>\n        {\n          this.props.robots.map(user => {\n            return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default CardList;\n","import React from 'react';\n\nclass SearchBox extends React.Component {\n  render() {\n    return (\n      <div className='pa2'>\n        <input\n          className='pa3 ba b--green bg-lightest-blue'\n          type='search'\n          placeholder='search robots'\n          onChange={this.props.onSearchChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nclass Scroll extends React.Component {\n  render() {\n    return(\n      <div style={{overflowY: 'scroll', border: '5px solid black', height: '600px'}}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield:''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value});\n  }\n\n  render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return !robots.length ? <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox onSearchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}